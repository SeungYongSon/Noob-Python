# 변수를 만들 때는 = 기호를 사용한다.
# 파이션은 C나 JAVA처럼 변수의 자료형을 함께 쓸 필요가 없다.
# 파이썬은 변수에 저장된 값을 스스로 판단한여 자료형을 알아낸다.

# 파이션에서 변수는 객체를 가리키는 것이라고도 말 할 수 있다.
# 여기서 객체는 지금까지 보아 왔던 지료형을 포함해서
# "파이썬에서 사용되는 모든것"이다.

# 3이라는 값을 가지는 정수 자료형(객체가)이 메모리에 생성된다.
# a는 변수의 이름이며, 3이라는 정수형 객체가 저장된 메모리 위치를 가르킨다.
# 객체가 저장된 메모리의 위치를 가리키는 레퍼런스(Reference)라고도 할 수 있다.
import sys
print(sys.getrefcount(3))
# sys.getrefcount() 함수는 이라는 정수형 객체에 참조 개수가 몇 개 있는지 살펴 볼수 있다.
a = 3
b = 3
# a, b에 3을 대입했다.
print(sys.getrefcount(3))
# sys.getrefcount() 함수로 확인한 결과 참조 개수가 +2 된 것을 알 수 있다.
# 결론은 a, b는 3이라는 정수형 객체를 가리키고 있다는 것이다.

# 변수를 만드는 여러가지 방법
a, b = ('python', 'life')  # 튜플을 이용해 a, b에 값을 대입할 수 있다.
(a, b) = 'python', 'life'  # 튜플은 괄호를 생략해도 괜찬다.
[a,b] = ['python', 'life']  # 리스트로 변수를 만들 있다.
a = b = 'python'  # 여러 개의 변수에 같은 값을 대입할 수 있다.

# 메모리에 생성된 변수 없애기 del

# 객체를 가리키는 변수들의 개수를 '레퍼런스 카운트(Reference Count)' 라고 한다.
# 레퍼런스 카운트가 0이 되는 순간 객체는 자동으로 사라진다.
# 즉 'python'이라는 객체를 가리키는 a,b가 사라지면 그 객체는 메모리에서 사라진다.
a = b = 'python'
del(a)
del(b)
# del()을 통해 'python'이라는 객체를 가리키고잇는 a와 b를 삭제한다.
# 그렇게 'python'이라는 객체를 가리키는 변수가 없어지고 그 객체는 사라지게 되는 것이다.

# 리스트를 변수에 넣고 복사하고자 할 때

a = [1, 2, 3]  # a 가 [1, 2, 3]라는 리스트 객체를 가리키고 있다.
b = a
# b 가 a 변수를 가르킨다.
# 즉, b는 b->a->[1, 2, 3]를 가리키는 것이고, a와 b은 같은 객체를 가리키고 있다.
print(a)
print(b)
a[1] = 4  # [1, 4, 3] 으로 값이 바뀜
print(a)
print(b)  # b도 같은 객체를 가리키고 있기 때문에 a와 값이 똑같이 바뀐다.

# 그렇다면 a가 가리키는 리스트와는 다른 리스트를 가리키게 할려면 어떻게 해야될까?

# : 이용
a = [1, 2, 3]
b = a[:]  # : 을 통해 a가 가리키는 리스트 전체를 복사한다.
# 그러면 b는 a가 가리키는 리스트만 복사할 뿐 다른 객체를 가리킬 수 있다.
a[1] = 4
print(a)
print(b) # a의 값이 바뀌어도 값이 b의 값은 바뀌지 않는 것을 알 수 있다.

# copy 모듈 이용
# from copy import copy
a = [1, 2, 3]
from copy import copy  # 아직 내가 공부하는 파트가 아니다. 알고만 있자.
b = copy(a)  # b = copy(a)는 b = a[:]과 동일하다.

# 두 변수가 서로 다른 객체를 가리키고 있는지 확인하고 싶을 때 is
# is 을 통해 같은 객체 가리키고 있는지 아닌지 알 수 있다.
print(b is a)  # 같은 객체를 가리키고 있으면 True, 아니면 False을 반환한다.
