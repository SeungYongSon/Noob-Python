# 딕셔너리는 리스트나 튜플처럼 순차적으로(sequential) 해당 요소값을 구하지 않고
# Key를 통해 Value를 얻는다.
# 해시(Hash)처럼 대응 관계로 나타낼 수 있는 자료형이다.

# 딕셔너리의 모습
# {Key1:Value1, Key2:Value2, Key3:Value3 ...}
#
# Key를 통해 Value를 얻는다. 이것이 딕셔너리의 특징이다.
# Value2라는 값을 찾기 위해 순차적으로 모두 검색하는 것이 아닌
# Key를 통해 Value2라는 것이 있는 곳만 펼쳐보는 것이다.

dic = {'name': 'pey', 'phone': '0113534534543', 'birth': '1118'}
a = {1: 'hi'}  # Key에 정수값을 넣을 수 있고, Value에 'hi'라는 문자열을 넣을 수 있다.
a = {'hi': 1}  # 몰론 반대로도 가능하다.
a = {'a': [1, 2, 3]}  # Value에 리스트를 넣을 수 있다. 하지만 Key로 리스트를 넣는 것은 안된다.
a = {'a': (1, 2, 3)}  # Value에 튜플을 넣을 수 있다. 리스트와 반대로 Key로 튜플을 넣을 수 있다.
a = {1.234234: "what?"}  # Key에 실수 값을 넣을 수도 있다...

# 딕셔너리 추가, 삭제

# 딕셔너리 쌍 추가
a = {1: 'a'}
a[2] = 'b'  # 이렇게 하면 된다. 그러면 {1: 'a'}라는 딕셔너리에 2:'b'라는 딕셔너리 쌍이 추가된다.
print(a)

a['name'] = 'pey'  # {1: 'a', 2: 'b'}라는 딕셔너리에 'name':'pey' 라는 딕셔너리 쌍이 추가된다.
print(a)

a[3] = [1, 2, 3]  # {1: 'a', 2: 'b', 'name': 'pey'}라는 딕셔너리에 3: [1, 2, 3] 라는 딕셔너리 쌍이 추가된다.
print(a)

# 딕셔너리 요소 삭제하기
del a[1]  # key(1)에 해당하는 {key : value}({1 : 'a'} 쌍이 삭제된다
print(a)
