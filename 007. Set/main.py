# 집합(set)은 파이썬 2.3부터 지원되기 시작한 자료형.
# 집합에 관련된 것들을 쉽게 처리하기 위해 만들어진 자료형이다.
# set 키워드를 이용해 만들 수 있다.

s1 = set([1, 2, 3])
print(s1)
s2 = set("Hello")
print(s2)
s3 = set((1,2,3,4,5))
print(s3)
# 리스트, 문자열, 튜플을 통해 만들 수 있다.

# 여기서 s2의 결과가 이상하다고 생각 할지도 모른다.
# 결과가 그렇게 나온 것은 set의 2가지 특징 때문이다.
# 1. 중복을 허용하지 않는다.
# 2. 순서가 없다. (Unordered)
#
# 그래서 중복을 허용하지 않는 set의 특징은
# 자료형의 중복을 제거하기 위한 필터 역할로 종종 사용되기도 한다.
#
# set 자료형은 순서가 없기 때문에 인덱싱으로 값을 찾을 수 없다. 딕셔너리와 비슷하다.
# 만약 set 자료형에 저장된 값을 인덱싱으로 접근할려면 리스트나 튜플로 변환해야 한다.
s1 = set([1, 2, 3])
l1 = list(s1)  # list() 함수을 이용해 리스트로 변환 시켰다.
print(l1)

t1 = tuple(s1)  # tuple() 함수를 이용해 튜플로 변환 시켰다.
print(t1)

# 집합 자료형을 활용하는 방법

# 교집합, 합집합, 차집합 구하기

# set 자료형이 잘 사용되는 경우는 교집합과 합집합, 차집합을 구할 때다.
s1 = set([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])
s2 = set([1, 3, 5, 7, 9, 11, 13, 15])

# 교집합
print(s1 & s2)  # &을 통해 간단히 구할 수 있다.
print(s1.intersection(s2))  # intersection()을 사용해서 구할 수 있다.
# 결과-> {1, 3, 5, 7, 9, 11, 13, 15}

# 합집합
print(s1 | s2)  # |을 통해 간단히 구할 수 있다.
print(s1.union(s2))  # union()을 사용해서 구할 수 있다.
# 결과-> {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}

# 차집합
print(s1 - s2)  # -을 통해 간단히 구할 수 있다.
print(s1.difference(s2)) # difference()을 사용해서 구할 수 있다.
# 결과-> {2, 4, 6, 8, 10, 12, 14}

# 집합 자료형 관련 함수

# 값 1개 추가하기 add
s1 = set([1, 2, 3])
s1.add(4)
print(s1)

# 값 여러개 추가하기 update
s1 = set([1, 2, 3])
s1.update([4, 5, 6])
print(s1)

# 특정 값 제거하기 remove
s1 = set([1, 2, 3])
s1.remove(2)
print(s1)
